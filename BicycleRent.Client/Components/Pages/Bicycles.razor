@page "/"
@using System.Globalization;
@inject HttpClient Http

<PageTitle>Bicycles</PageTitle>

<h1>Велосипеды</h1>

<p>Список велосипедов.</p>

<Button class="add-new-button" Clicked="@ShowAdd" Color="Blazorise.Color.Primary">
    Добавить велосипед
</Button>

<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Серийный номер</th>
            <th>Тип велосипеда</th>
            <th>Модель велосипеда</th>
            <th>Цвет велосипеда</th>
        </tr>
    </thead>

    <tbody>
        @foreach (var bike in _bicycles)
        {
            <tr>
                <td>@bike.BicycleId</td>
                <td>@bike.SerialNumber</td>
                <td>@GetType(@bike.TypeId)</td>
                <td>@bike.Model</td>
                <td>@bike.Color</td>
                <td>
                    <Button Color="Blazorise.Color.Primary"
                            class="edit-item"
                            @onclick="@(() => ShowUpdate(bike.BicycleId))"
                            Style="max-width: 89px"
                            TextAlignment="TextAlignment.Center">
                        UPDATE
                    </Button>
                </td>
                <td>
                    <Button Color="Blazorise.Color.Danger"
                            class="edit-item"
                            @onclick="@(() => DeleteItem(bike.BicycleId))"
                            Style="max-width: 89px"
                            TextAlignment="TextAlignment.Center">
                        DELETE
                    </Button>
                </td>
            </tr>
        }
    </tbody>
</table>

<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <h5>Добавить велосипед</h5>
        </ModalHeader>
        <ModalBody>
            <div class="mb-3">
                <label for="serialNumber">Серийный номер</label>
                <input type="text" id="serialNumber" @bind="newBicycle.SerialNumber" class="form-control" />
			</div>
            <div class="mb-3">
                <label for="type">Тип велосипеда</label>
				<select id="type" @bind="newBicycle.TypeId">
					@foreach (var type in _types)
					{
						<option>@type.TypeId</option>
					}
				</select>
				<p class="form-control" style="border: none">@GetType(newBicycle.TypeId)</p>
			</div>
            <div class="mb-3">
                <label for="Color">Модель велосипеда</label>
                <input type="text" id="model" @bind="newBicycle.Model" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="color">Цвет велосипеда</label>
                <input type="text" id="color" @bind="newBicycle.Color" class="form-control" />
            </div>
            
        </ModalBody>

        <ModalFooter>
            <Button Color="Blazorise.Color.Primary" Clicked="@(forAdd ? AddNewItem : UpdateItem)">
                @(forAdd ? "Добавить" : "Изменить")
            </Button>
            <Button Color="Blazorise.Color.Secondary" Clicked="@CancelHandler">
                Отмена
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>


@code {
    private List<Bicycle> _bicycles = new();
    private List<BicycleType> _types = new();

    private Modal? modalRef = null!;

    private Bicycle newBicycle = new()
        {
            BicycleId = 0,
            SerialNumber = "N000",
            Type = null,
            TypeId = 0,
            Model = "",
            Color = ""
        };

    private bool forAdd = true;
    private string bicycleUrl = "api/BicycleDb";
    private string typeUrl = "api/BicycleTypeDb";

    private async Task LoadTypes()
    {
        var responseType = await Http.GetFromJsonAsync<List<BicycleType>>(typeUrl);
        if (responseType != null)
        {
            _types = responseType;
        }
    }

    private async Task LoadBicycles()
    {
        var responseBicycle = await Http.GetFromJsonAsync<List<Bicycle>>(bicycleUrl);
        if (responseBicycle != null)
        {
            _bicycles = responseBicycle;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadBicycles();
        await LoadTypes();
    }

    private async Task ShowUpdate(int bicycleId)
    {
        forAdd = false;
        var response = await Http.GetFromJsonAsync<Bicycle>($"{bicycleUrl}/{bicycleId}");
        if (response != null)
        {
            newBicycle = response;
        }
        await modalRef!.Show();
    }

    private async Task ShowAdd()
    {
        forAdd = true;
        newBicycle = new()
            {
                BicycleId = 0,
                SerialNumber = "N000",
                Type = null,
                TypeId = 0,
                Model = "",
                Color = ""
            };
        await LoadBicycles();
        await modalRef!.Show();
    }



    private async Task CancelHandler()
    {
        await modalRef!.Hide();
    }

    private async Task AddNewItem()
    {
        await Http.PostAsJsonAsync<Bicycle>(bicycleUrl, newBicycle);
        await LoadBicycles();
        await modalRef!.Hide();
    }

    private async Task UpdateItem()
    {
        await Http.PutAsJsonAsync($"{bicycleUrl}/{newBicycle.BicycleId}", newBicycle);

        newBicycle = new()
            {
                BicycleId = 0,
                SerialNumber = "N000",
                Type = null,
                TypeId = 0,
                Model = "",
                Color = ""
            };
        await LoadBicycles();
        await modalRef!.Hide();
    }

    private async Task DeleteItem(int bicycleId)
    {
        await Http.DeleteAsync($"{bicycleUrl}/{bicycleId}");
        await LoadBicycles();
    }

    private string GetType(int TypeId) => _types?.FirstOrDefault(p => p.TypeId == TypeId)?.Type!;
}
